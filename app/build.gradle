plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    alias(libs.plugins.ktlint)
}

android {
    lint {
        disable.add("CoroutineCreationDuringComposition")
    }
    lintOptions {
        textOutput "stdout"
        textReport true
        textOutput file("lint-report.txt")
        warningsAsErrors false
        abortOnError true
        lintConfig file("${project.rootDir}/lint-check/lint.xml") // Optional, see below
    }
    namespace 'com.kyrie.myportfolio'
    compileSdk 35

    defaultConfig {
        applicationId "com.kyrie.myportfolio"
        minSdk 23
        targetSdk 35
        versionCode 26
        versionName "26.0"
        multiDexEnabled = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles project(':data').file('proguard-rules.pro')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    packagingOptions {
        resources {
            excludes += [
                'META-INF/DEPENDENCIES',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/license.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
                'META-INF/notice.txt',
                'META-INF/ASL2.0',
                'META-INF/*.md',
                'META-INF/*.kotlin_module',
                'META-INF/AL2.0',
                'META-INF/LGPL2.1'
            ]
        }
    }
}


ktlint {
    verbose.set(true)
    filter {
        exclude { it.file.path.contains("generated/") }
        exclude { it.file.path.contains("build/") }
    }
}

tasks.register("ktLintCheckFormat") {
    description = "Formats Kotlin files and checks for formatting issues"
    group = "formatting"
    dependsOn("ktlintFormat", "ktlintCheck")
}


dependencies {
    lintChecks(project(':lint-checks'))
    implementation project(':utility')
    implementation project(':domain')
    implementation project(':data')
    implementation libs.multidex
    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraint
    implementation libs.shimmer
    implementation libs.bundles.koins
    implementation libs.progressButton
    implementation libs.circleImageView
    implementation libs.flexBox
    implementation libs.lottieView
    implementation libs.workManager
    implementation libs.afreakyelfPdfViewr
    testImplementation libs.bundles.androidTest
}
